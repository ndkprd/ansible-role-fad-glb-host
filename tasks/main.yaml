---

# - name: Include the add GLB host task.
#   tags:
#     - fad_glb_hosts
#   block:
#     - name: Include the add GLB host task.
#       ansible.builtin.include_tasks: 01-0-glb-host.yaml
#       loop: "{{ fad_glb_hosts }}"
#       loop_control:
#         loop_var: host

- name: Create/update GLB Hosts entries.
  tags: [fad_glb_hosts]
  vars:
    fad_glb_host_api_endpoint: "{{ fad_base_url + fad_api_endpoint.glb_host }}"
  block:

    - name: Print out the GLB Hosts existing values.
      ansible.builtin.debug:
        msg: >
          {{ (lookup('url', fad_glb_host_api_endpoint
          % (glb_host.name), validate_certs=false, split_lines=false, headers=fad_api_header) | from_json).get('payload') }}
      loop: "{{ fad_glb_hosts }}"
      loop_control:
        loop_var: glb_host
        label: "{{ glb_host.name }}"
      tags: [debug]

    - name: Create new GLB Hosts entry if it's not found.
      ansible.builtin.uri:
        method: POST
        url: "{{ fad_glb_host_api_endpoint | format(glb_host.name) }}"
        body_format: "{{ fad_api_uri_params.body_format }}"
        validate_certs: "{{ fad_api_uri_params.validate_certs }}"
        return_content: "{{ fad_api_uri_params.return_content }}"
        status_code: "{{ fad_api_uri_params.status_code }}"
        headers: "{{ fad_api_header }}"
        body: |
          {
          "mkey": "{{ glb_host.name | default(glb_host.hostname + '.' + glb_host.domain) }}",
          "default-feedback-ip": "{{ glb_host.default_ipv4 | default('0.0.0.0') | string }}",
          "default-feedback-ip6": "{{ glb_host.default_ipv6 | default('::') | string }}",
          "host-name": "{{ glb_host.hostname }}",
          "domain-name": "{{ glb_host.domain }}.",
          "fortiview": "{{ glb_host.fortiview | default('enable') }}",
          "load-balance-method": "{{ glb_host.load_balance_method | default('weight') }}",
          "persistence": "{{ glb_host.persistence | default('enable') }}",
          "respond-single-record": "{{ glb_host.respond_single_record | default('enable') }}"
          }
      register: fad_glb_host_post_results
      loop: "{{ fad_glb_hosts }}"
      loop_control:
        loop_var: glb_host
        label: "{{ glb_host.name }}"
      when: >
        (lookup('url', fad_glb_host_api_endpoint
        % (glb_host.name), validate_certs=false, split_lines=false,
        headers=fad_api_header) | from_json).get('payload').mkey is undefined
      changed_when: "fad_glb_host_post_results.json.payload == 0"
      failed_when: fad_glb_host_post_results.json.payload not in [0, -15]

    - name: Update GLB Host entry if it's exist and any of its value is changed.
      ansible.builtin.uri:
        method: PUT
        url: "{{ fad_glb_host_api_endpoint | format(glb_host.name) }}"
        body_format: "{{ fad_api_uri_params.body_format }}"
        validate_certs: "{{ fad_api_uri_params.validate_certs }}"
        return_content: "{{ fad_api_uri_params.return_content }}"
        status_code: "{{ fad_api_uri_params.status_code }}"
        headers: "{{ fad_api_header }}"
        body: |
          {
          "mkey": "{{ glb_host.name | default(glb_host.hostname + '.' + glb_host.domain) }}",
          "default-feedback-ip": "{{ glb_host.default_ipv4 | default('0.0.0.0') | string }}",
          "default-feedback-ip6": "{{ glb_host.default_ipv6 | default('::') | string }}",
          "host-name": "{{ glb_host.hostname }}",
          "domain-name": "{{ glb_host.domain }}.",
          "fortiview": "{{ glb_host.fortiview | default('enable') }}",
          "load-balance-method": "{{ glb_host.load_balance_method | default('weight') }}",
          "persistence": "{{ glb_host.persistence | default('enable') }}",
          "respond-single-record": "{{ glb_host.respond_single_record | default('enable') }}"
          }
      register: fad_glb_host_put_results
      loop: "{{ fad_glb_hosts }}"
      loop_control:
        loop_var: glb_host
        label: "{{ glb_host.name }}"
      when: >
        (
        (lookup('url', fad_glb_host_api_endpoint
        % (glb_host.name), validate_certs=false, split_lines=false,
        headers=fad_api_header) | from_json)['mkey'] is defined) and
        (
        (lookup('url', fad_glb_host_api_endpoint
        % (glb_host.name), validate_certs=false, split_lines=false,
        headers=fad_api_header) | from_json)['default-feedback-ip'] != host.default_ipv4 | default('0.0.0.0') | string or
        (lookup('url', fad_glb_host_api_endpoint
        % (glb_host.name), validate_certs=false, split_lines=false,
        headers=fad_api_header) | from_json)['default-feedback-ip6'] != host.default_ipv6 | default('::') | string or
        (lookup('url', fad_glb_host_api_endpoint
        % (glb_host.name), validate_certs=false, split_lines=false,
        headers=fad_api_header) | from_json)['host-name'] != host.hostname or
        (lookup('url', fad_glb_host_api_endpoint
        % (glb_host.name), validate_certs=false, split_lines=false,
        headers=fad_api_header) | from_json)['fortiview'] != host.fortiview | default('enable') or
        (lookup('url', fad_glb_host_api_endpoint
        % (glb_host.name), validate_certs=false, split_lines=false,
        headers=fad_api_header) | from_json)['load-balance-method'] != host.load_balance_method | default('weight') or
        (lookup('url', fad_glb_host_api_endpoint
        % (glb_host.name), validate_certs=false, split_lines=false,
        headers=fad_api_header) | from_json)['persistence'] != host.persistence | default('enable') or
        (lookup('url', fad_glb_host_api_endpoint
        % (glb_host.name), validate_certs=false, split_lines=false,
        headers=fad_api_header) | from_json)['respond-single-record'] != host.respond_single_record | default('enable')
        )
      changed_when: "fad_glb_host_put_results.json.payload == 0"
      failed_when: "fad_glb_host_put_results.json.payload != 0 and fad_glb_host_put_results.json.payload != -15"

    - name: Print out the GLB Hosts values after create/update task.
      ansible.builtin.debug:
        msg: >
          {{ (lookup('url', fad_glb_host_api_endpoint
          % (glb_host.name), validate_certs=false, split_lines=false, headers=fad_api_header) | from_json).get('payload') }}
      loop: "{{ fad_glb_hosts }}"
      loop_control:
        loop_var: glb_host
        label: "{{ glb_host.name }}"
      tags: [debug]

- name: Create/update GLB Host VSP List entries.
  vars:
    fad_glb_host_vsp_list_api_endpoint: "{{ fad_base_url + fad_api_endpoint.glb_host_vsp_list }}"
  tags: [fad_glb_hosts, fad_glb_host_vsp_lists]
  block:

    - name: Print out the GLB Host VSP List existing values.
      ansible.builtin.debug:
        msg: >
          {{ (lookup('url', fad_glb_host_vsp_list_api_endpoint
          % (glb_host.0.name, glb_host.1.name), validate_certs=false, split_lines=false,
          headers=fad_api_header) | from_json).get('payload') }}
      loop: "{{ fad_glb_hosts | subelements('vsp_lists') }}"
      loop_control:
        loop_var: glb_host
        label: "{{ glb_host.0.name + ' to ' + glb_host.1.pool_name }}"
      tags: [debug]

    - name: Create new GLB Host VSP List entry if it's not found.
      ansible.builtin.uri:
        method: POST
        url: "{{ fad_glb_host_vsp_list_api_endpoint | format(glb_host.0.name, glb_host.1.name) }}"
        body_format: "{{ fad_api_uri_params.body_format }}"
        validate_certs: "{{ fad_api_uri_params.validate_certs }}"
        return_content: "{{ fad_api_uri_params.return_content }}"
        status_code: "{{ fad_api_uri_params.status_code }}"
        headers: "{{ fad_api_header }}"
        body: |
          {
            "mkey": "{{ glb_host.1.name | string }}",
            "isp": "{{ glb_host.1.isp | default('') }}",
            "topology": "{{ glb_host.1.topology | default('') }}",
            "virtual-server-pool": "{{ glb_host.1.pool_name }}",
            "weight": "{{ glb_host.1.weight | default('100') | string }}"
          }
      register: fad_glb_host_vsp_list_post_results
      loop: "{{ fad_glb_hosts | subelements('vsp_lists') }}"
      loop_control:
        loop_var: glb_host
        label: "{{ glb_host.0.name + ' to ' + glb_host.1.pool_name }}"
      when: >
        (lookup('url', fad_glb_host_vsp_list_api_endpoint
        % (glb_host.0.name, glb_host.1.name),validate_certs=false, split_lines=false,
        headers=fad_api_header) | from_json).get('payload').mkey is undefined
      changed_when: "fad_glb_host_vsp_list_post_results.json.payload == 0"
      failed_when: "fad_glb_host_vsp_list_post_results.json.payload not in [0, -15]"

    - name: Update GLB Host VSP List entry if it's exist and any of its value is changed.
      ansible.builtin.uri:
        method: PUT
        url: "{{ fad_glb_host_vsp_list_api_endpoint | format(glb_host.0.name, glb_host.1.name) }}"
        body_format: "{{ fad_api_uri_params.body_format }}"
        validate_certs: "{{ fad_api_uri_params.validate_certs }}"
        return_content: "{{ fad_api_uri_params.return_content }}"
        status_code: "{{ fad_api_uri_params.status_code }}"
        headers: "{{ fad_api_header }}"
        body: |
          {
            "mkey": "{{ glb_host.1.name | string }}",
            "isp": "{{ glb_host.1.isp | default('') }}",
            "topology": "{{ glb_host.1.topology | default('') }}",
            "virtual-server-pool": "{{ glb_host.1.pool_name }}",
            "weight": "{{ glb_host.1.weight | default('100') | string }}"
          }
      register: fad_glb_host_vsp_list_put_results
      loop: "{{ fad_glb_hosts | subelements('vsp_lists') }}"
      loop_control:
        loop_var: glb_host
        label: "{{ glb_host.0.name + ' to ' + glb_host.1.pool_name }}"
      when: >
        ((lookup('url', fad_glb_host_vsp_list_api_endpoint
        % (glb_host.0.name, glb_host.1.name),validate_certs=false, split_lines=false,
        headers=fad_api_header) | from_json).get('payload')['mkey'] is defined) and
        (
        (lookup('url', fad_glb_host_vsp_list_api_endpoint
        % (glb_host.0.name, glb_host.1.name),validate_certs=false, split_lines=false,
        headers=fad_api_header) | from_json).get('payload')['isp'] != glb_host.1.isp | default('')  or
        (lookup('url', fad_glb_host_vsp_list_api_endpoint
        % (glb_host.0.name, glb_host.1.name),validate_certs=false, split_lines=false,
        headers=fad_api_header) | from_json).get('payload')['topology'] != glb_host.1.topology | default('') or
        (lookup('url', fad_glb_host_vsp_list_api_endpoint
        % (glb_host.0.name, glb_host.1.name),validate_certs=false, split_lines=false,
        headers=fad_api_header) | from_json).get('payload')['virtual-server-pool'] != glb_host.1.pool_name or
        (lookup('url', fad_glb_host_vsp_list_api_endpoint
        % (glb_host.0.name, glb_host.1.name),validate_certs=false, split_lines=false,
        headers=fad_api_header) | from_json).get('payload')['weight'] != glb_host.1.weight | default ('100') | string
        )
      changed_when: "fad_glb_host_vsp_list_put_results.json.payload == 0"
      failed_when: "fad_glb_host_vsp_list_put_results.json.payload not in [0, -15]"

    - name: Print out the GLB Host VSP List values after create/update task.
      ansible.builtin.debug:
        msg: >
          {{ (lookup('url', fad_glb_host_vsp_list_api_endpoint
          % (glb_host.0.name, glb_host.1.name), validate_certs=false, split_lines=false,
          headers=fad_api_header) | from_json).get('payload') }}
      loop: "{{ fad_glb_hosts | subelements('vsp_lists') }}"
      loop_control:
        loop_var: glb_host
        label: "{{ glb_host.0.name + ' to ' + glb_host.1.pool_name }}"
      tags: [debug]

# THE DNS POLICY MOVE ROLE WILL BE HERE
